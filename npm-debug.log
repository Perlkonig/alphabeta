0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish', '--force' ]
2 info using npm@2.11.3
3 info using node@v0.12.7
4 warn using --force I sure hope you know what you are doing.
5 verbose publish [ '.' ]
6 silly cache add args [ '.', null ]
7 verbose cache add spec .
8 silly cache add parsed spec { raw: '.',
8 silly cache add   scope: null,
8 silly cache add   name: null,
8 silly cache add   rawSpec: '.',
8 silly cache add   spec: '/Users/panchishina/Documents/alphabeta',
8 silly cache add   type: 'directory' }
9 verbose addLocalDirectory /Users/panchishina/.npm/alphabeta/0.0.21/package.tgz not in flight; packing
10 verbose tar pack [ '/Users/panchishina/.npm/alphabeta/0.0.21/package.tgz',
10 verbose tar pack   '/Users/panchishina/Documents/alphabeta' ]
11 verbose tarball /Users/panchishina/.npm/alphabeta/0.0.21/package.tgz
12 verbose folder /Users/panchishina/Documents/alphabeta
13 info prepublish alphabeta@0.0.21
14 verbose addLocalTarball adding from inside cache /Users/panchishina/.npm/alphabeta/0.0.21/package.tgz
15 silly cache afterAdd alphabeta@0.0.21
16 verbose afterAdd /Users/panchishina/.npm/alphabeta/0.0.21/package/package.json not in flight; writing
17 verbose afterAdd /Users/panchishina/.npm/alphabeta/0.0.21/package/package.json written
18 silly publish { name: 'alphabeta',
18 silly publish   version: '0.0.21',
18 silly publish   description: 'a general minimax framework which uses alphabeta',
18 silly publish   main: 'alphabeta.js',
18 silly publish   devDependencies: {},
18 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git+https://github.com/panchishin/alphabeta.git' },
18 silly publish   keywords:
18 silly publish    [ 'minimax',
18 silly publish      'alphabeta',
18 silly publish      'minimax alphabeta',
18 silly publish      'game logic',
18 silly publish      'chess logic',
18 silly publish      'ai',
18 silly publish      'asynchronous',
18 silly publish      'alphabeta db',
18 silly publish      'alphabeta rest',
18 silly publish      'minimax db',
18 silly publish      'minimax rest' ],
18 silly publish   author: { name: 'Anton Panchishin' },
18 silly publish   license: 'MIT',
18 silly publish   bugs: { url: 'https://github.com/panchishin/alphabeta/issues' },
18 silly publish   homepage: 'https://github.com/panchishin/alphabeta',
18 silly publish   readme: '# alphabeta\nMinimax implementation using AlphaBeta in Node using *asynchronous* calls to customizable game logic, scoring, and move generation.\n\nThe rational and motivation to use asynchronous calls (specifically to the scoring function) is to support integration with other processes such as DBs and REST calls whereby a scoring function uses a growing data lookup.  This cannot be accomplished in a synchronous way in javascript.\n\n[![NPM version][npm-image]][npm-url]\n[![Downloads][downloads-image]][npm-url] \n[![Gitter chat][gitter-image]][gitter-url]\n\nHelp improve this package.  Ask me questions using [![Gitter chat][gitter-image]][gitter-url] or you can [log bugs here](https://github.com/panchishin/alphabeta/issues).  Even what seems trivial such as minor documentation errors or typos.\n\n\n# Usage\n\n## alphabeta configuration\nConstruct an alphabeta calculator like so:\n\n\tvar config = {\n\t\tscoreFunction \t\t: scoreFunction,\n\t\tgenerateMoves\t\t: generateMovesFunction,\n\t\tcheckWinConditions \t: checkWinConditionsFunction\n\t}\n\n\tvar alphabeta = require(\'alphabeta\')( config );\n\nThat creates one instance of an alphabeta calculator which uses the scoring, move generation, and win condition checking that you provide.  If you want to make two different computer opponents battle eachother using two different strategies you\'ll want to create two instances of alphabeta each with its own configuration.\n\n## alphabeta.setup\nEach new turn or new problem will require you to set the current state of alphabeta.  You can reuse the previous configuration unless you want to change the logic (scoring, move generation) that is used.\nSetup or reset the alphabeta calculator with data like so:\n\n\tvar setup = {\n\t\tstate : yourInitialStateObject,\n\t\tdepth : theDepthOfSearch_alsoKnownAsLookAhead\n\t}\n\n\talphabeta.setup( setup );\n\n\'depth\' is optional (defaults to 1) and is the depth of search in moves.  Also known as look-ahead.\n\n\n## alphabeta.step\nCall the alphabeta calculator like so:\n\n\talphabeta.step( callback );\n\nA typical callback is as follows:\n\n\tfunction callback( done ) {\n\t\tif ( done === true ) {\n\t\t\tvar bestNextStateAsGeneratedByGenerateMoves = alphabeta.best()\n\t\t\t// do something\n\t\t} else {\n\t\t\t// do something else\n\t\t}\n\t}\n\n\'step\' moves the calculator ahead by one step.  Depending on the number of moves generated and the depthParameter there could be hundreds, thousands, millions, or more steps needed before the calculator finishes.  alphabeta.best() returns the best state.\n\n## alphabeta.allSteps\nTo execute all the steps until alphabeta has found the best move for the depth.  Call like so:\n\n\talphabeta.allSteps( callback );\n\nA typical callback is as follows\n\n\tfunction callback( beststate ) {\n\t\t// beststate is the best state as generated by generateMoves\n\t}\n\n## alphabeta.stepForMilliseconds\nTo execute all the steps until alphabeta has found the best move for the depth or the number of milliseconds has expired.  Call like so:\n\n\talphabeta.stepForMilliseconds( milliseconds , callback );\n\nA typical callback is as follows\n\n\tfunction callback( beststate ) {\n\t\t// beststate is the best state as generated by generateMoves\n\t}\n\n\n\n## Configuration Functions\nThis is the specification of the configuration functions you pass to alphabeta\n\n### scoreFunction\nThe scoreFunction that you provide is an asynchronous function that evaluates a state like so:\n\n\tscoreFunction( state , scoreCallback ) {\n\t\tvar scoreNumber = 0;\n\t\t// inspect state and modify the score\n\t\tscoreCallback( scoreNumber );\n\t}\n\n### generateMoves\nThe generateMovesFunction that you provide is a synchronous function that returns a list of possible states like so:\n\n\tgenerateMovesFunction( currentState ) {\n\t\tvar nextPossibleStates = [];\n\n\t\t// use the currentState and possibly some \n\t\t// other info to create new state objects\n\t\t// which would represent valid next states.\n\t\t// If this is a game, then the state\n\t\t// is the game board and move as an object\n\n\t\t// for ( item in a list of possible moves ) {\n\t\t\t// use item to create a new state\n\t\t\t// push state onto nextPossibleStates\n\t\t// }\n\n\t\treturn nextPossibleStates;\n\n\t}\n\tnextPossibleStates = generateMovesFunction( currentState );\n\n### checkWinConditionsFunction\nThe checkWinConditionsFunction that you provide is a synchronous function that checks to see if the state is a good end state such as a winning move.  A psudo code implementation may look like so:\n\n\tcheckWinConditionsFunction( state ) {\n\t\tif ( /* state is a win or positive end condition */ ) {\n\t\t\treturn true; // anything truthy such as \n\t\t\t\t\t\t //\'true\' or a string specifying the reason\n\t\t} else {\n\t\t\treturn false; // anything falsy such as null or undefined\n\t\t}\n\t}\n\nIf you want to know the best score found you can use \n\n\tvar score = alphabeta.alpha();\n\nIf you want to know the predicted final state if the everything unfolds as the alphabeta calculator predicts use:\n\n\tvar state = alphabeta.prediction();\n\n# Example\n\n## Tic Tac Toe\n\nExecute the *tic tac toe* example like so\n\n\t# player 1 and 2 both only get 1 look-ahead\n\tnode example/tic-tac-toe/index.js 1 1\n\n\t# player 2 gets 3 look-aheads\n\tnode example/tic-tac-toe/index.js 1 3\n\n\t# player 1 gets 3 look-aheads\n\tnode example/tic-tac-toe/index.js 3 1\n\n\t# player 1 and 2 both only get 9 look-ahead\n\tnode example/tic-tac-toe/index.js 9 9\n\n## Template\n\nThere is an empty template with \'TODO\' comments to create a fully working computer vs computer scenario.\n\n\tnode example/template/index.js\n\n## Chomp (from template)\n\nChomp is a trivial game of two players.  Each player can eat 1, 2, or 3 pieces of a line of 10 pieces long.  The player who eats the last peices wins.  This example uses template/index.js as a boilerplate.\n\n\tnode example/template/chomp.js\n\n# FAQ\n\n**What is the state object?**  It is whatever you decided is best for your problem.  It is what **generateMovesFunction** creates and what **scoreFunction** takes as an argument.  If your problem is tic tac toe, then perhaps state contains the current board and some other data that you find interesting such as what the previous move was.\n\n**Why is there a .step(callback) function and not just .allSteps(callback)?**  Depending on the depthParameter and the average number of moves generated from **generateMovesFunction** calculating the best next state can take a very long time.  Using **.step(callback)** allows you to move the calculation forward towards completion without blocking and exit when you want, such as after 10 seconds.\n\n**What is the difference between a move and a state?** A move is the just the state that comes after some previous state.  It\'s just another name for state.\n\n# References\n\n* [Instructor: Patrick Winston from MIT](https://www.youtube.com/watch?v=STjW3eH0Cik)\n* [Wikipedia entry for Minimax](https://en.wikipedia.org/wiki/Minimax)\n\n\n[gitter-url]: https://gitter.im/panchishin/alphabeta\n[gitter-image]: https://badges.gitter.im/panchishin/alphabeta.png\n[downloads-image]: http://img.shields.io/npm/dm/alphabeta.svg\n[npm-url]: https://npmjs.org/package/alphabeta\n[npm-image]: http://img.shields.io/npm/v/alphabeta.svg\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: '9aff20f5399dd7daf1d0ad7ab9022ef49006cf01',
18 silly publish   _id: 'alphabeta@0.0.21',
18 silly publish   _shasum: '1d1b055f1bd33aec467ff6978d63fee7186befdc',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name alphabeta
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/alphabeta
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /Users/panchishina/.npm/alphabeta/0.0.21/package.tgz
26 verbose request uri https://registry.npmjs.org/alphabeta
27 verbose request sending authorization for write operation
28 info attempt registry request try #1 at 4:09:38 PM
29 verbose request using bearer token for auth
30 verbose request id 7b032c574c37c58f
31 http request PUT https://registry.npmjs.org/alphabeta
32 http 403 https://registry.npmjs.org/alphabeta
33 verbose headers { 'content-type': 'application/json',
33 verbose headers   'cache-control': 'max-age=60',
33 verbose headers   'content-length': '96',
33 verbose headers   'accept-ranges': 'bytes',
33 verbose headers   date: 'Sat, 15 Aug 2015 20:09:39 GMT',
33 verbose headers   via: '1.1 varnish',
33 verbose headers   connection: 'keep-alive',
33 verbose headers   'x-served-by': 'cache-ord1723-ORD',
33 verbose headers   'x-cache': 'MISS',
33 verbose headers   'x-cache-hits': '0',
33 verbose headers   'x-timer': 'S1439669379.001237,VS0,VE980' }
34 verbose request invalidating /Users/panchishina/.npm/registry.npmjs.org/alphabeta on PUT
35 error publish Failed PUT 403
36 verbose stack Error: "You cannot publish over the previously published version 0.0.21." : alphabeta
36 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
36 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
36 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:354:22)
36 verbose stack     at Request.emit (events.js:110:17)
36 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1207:14)
36 verbose stack     at Request.emit (events.js:129:20)
36 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1153:12)
36 verbose stack     at IncomingMessage.emit (events.js:129:20)
36 verbose stack     at _stream_readable.js:908:16
36 verbose stack     at process._tickCallback (node.js:355:11)
37 verbose statusCode 403
38 verbose pkgid alphabeta
39 verbose cwd /Users/panchishina/Documents/alphabeta
40 error Darwin 14.3.0
41 error argv "node" "/usr/local/bin/npm" "publish" "--force"
42 error node v0.12.7
43 error npm  v2.11.3
44 error code E403
45 error "You cannot publish over the previously published version 0.0.21." : alphabeta
46 error If you need help, you may report this error at:
46 error     <https://github.com/npm/npm/issues>
47 verbose exit [ 1, true ]
